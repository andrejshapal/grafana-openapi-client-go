// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command


import (
  "net/http"
  "strconv"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/runtime"
  httptransport "github.com/go-openapi/runtime/client"
  "github.com/go-openapi/spec"
  "github.com/go-openapi/strfmt"
  "github.com/go-openapi/swag"

  {{ imports .DefaultImports }}
  {{ imports .Imports }}
)

// Default {{ humanize .Name }} HTTP client.
var Default = NewHTTPClient(nil)

const (
    // DefaultHost is the default Host
    // found in Meta (info) section of spec file
    DefaultHost string = {{ printf "%#v" .Host }}
    // DefaultBasePath is the default BasePath
    // found in Meta (info) section of spec file
    DefaultBasePath string = {{ printf "%#v" .BasePath }}
    // Optional property that specifies the org.
    // For more info, see: https://grafana.com/docs/grafana/latest/developers/http_api/auth/
    OrgIDHeader = "X-Grafana-Org-Id"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = {{ printf "%#v" .Schemes }}

// NewHTTPClient creates a new {{ humanize .Name }} HTTP client.
func NewHTTPClient(formats strfmt.Registry) *{{ pascalize .Name }} {
  return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new {{ humanize .Name }} HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *{{ pascalize .Name }} {
  // ensure nullable parameters have default
  if cfg == nil {
    cfg = DefaultTransportConfig()
  }

  // create transport and client
  transport := newTransportWithConfig(cfg)
  return New(transport, cfg, formats)
}

// New creates a new {{ humanize .Name }} client
func New(transport runtime.ClientTransport, cfg *TransportConfig, formats strfmt.Registry) *{{ pascalize .Name }} {
  // ensure nullable parameters have default
  if formats == nil {
    formats = strfmt.Default
  }

  cli := new({{ pascalize .Name }})
  cli.cfg = cfg
  cli.Transport = transport
  {{- range .OperationGroups }}
  cli.{{ pascalize .Name }} = {{ .PackageAlias }}.New(transport, formats)
  {{- end }}
  return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
    return &TransportConfig {
        Host: DefaultHost,
        BasePath: DefaultBasePath,
        Schemes: DefaultSchemes,
    }
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
    Host string
    BasePath string
    Schemes []string
    // APIKey is an optional API key or service account token.
    APIKey string
    // BasicAuth is optional basic auth credentials.
    BasicAuth *url.Userinfo
    // OrgID provides an optional organization ID
    // with BasicAuth, it defaults to last used org
    // with APIKey, it is disallowed because service account tokens are scoped to a single org
    OrgID int64
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
    cfg.Host = host
    return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
    cfg.BasePath = basePath
    return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
    cfg.Schemes = schemes
    return cfg
}

// {{ pascalize .Name }} is a client for {{ humanize .Name }}
type {{ pascalize .Name }} struct {
  {{ range .OperationGroups }}
    {{ pascalize .Name }} {{ .PackageAlias }}.ClientService
  {{ end }}
  Transport runtime.ClientTransport
  // cfg is private because it should only be read (for example, to get the OrgID) or set (and then the transport must be created again)
  cfg *TransportConfig
}

// SetTransport changes the transport on the client and all its subresources
func (c *{{pascalize .Name}}) SetTransport(transport runtime.ClientTransport) {
  c.Transport = transport
  {{- range .OperationGroups }}
  c.{{ pascalize .Name }}.SetTransport(transport)
  {{- end }}
}

// WithTransport changes the transport on the client and all its subresources
// and returns the client
func (c *{{pascalize .Name}}) WithTransport(transport runtime.ClientTransport) *{{pascalize .Name}} {
	c.Transport = transport
	c.Folders.SetTransport(transport)
	return c
}

// OrgID returns the organization ID that was set in the transport config
func (c *{{pascalize .Name}}) OrgID() int64 {
  return c.cfg.OrgID
}

// WithOrgID sets the organization ID and returns the client
func (c *{{pascalize .Name}}) WithOrgID(orgID int64) *{{pascalize .Name}} {
  c.cfg.OrgID = orgID
	return c.WithTransport(newTransportWithConfig(c.cfg))
}

func newTransportWithConfig(cfg *TransportConfig) *httptransport.Runtime {
	tr := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)

  var auth []runtime.ClientAuthInfoWriter
  if cfg.BasicAuth != nil {
    pwd, _ := cfg.BasicAuth.Password()
    basicAuth := httptransport.BasicAuth(cfg.BasicAuth.Username(), pwd)
    auth = append(auth, basicAuth)
  }
  if cfg.OrgID != 0 {
    orgIDHeader := runtime.ClientAuthInfoWriterFunc(func(r runtime.ClientRequest, _ strfmt.Registry) error {
      return r.SetHeaderParam(OrgIDHeader, strconv.FormatInt(cfg.OrgID, 10))
    })
    auth = append(auth, orgIDHeader)
  }
  if cfg.APIKey != "" {
    APIKey := httptransport.BearerToken(cfg.APIKey)
    auth = append(auth, APIKey)
  }

	tr.DefaultAuthentication = httptransport.Compose(auth...)
	return tr
}